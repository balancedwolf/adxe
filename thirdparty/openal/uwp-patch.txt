diff --git a/alc/alc.cpp b/alc/alc.cpp
index 04dbcab..36f7e2c 100644
--- a/alc/alc.cpp
+++ b/alc/alc.cpp
@@ -169,6 +169,7 @@ LogLevel gLogLevel{LogLevel::Error};
 #if defined(_WIN32) && !defined(AL_LIBTYPE_STATIC)
 BOOL APIENTRY DllMain(HINSTANCE module, DWORD reason, LPVOID /*reserved*/)
 {
+#if WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP
     switch(reason)
     {
     case DLL_PROCESS_ATTACH:
@@ -177,6 +178,7 @@ BOOL APIENTRY DllMain(HINSTANCE module, DWORD reason, LPVOID /*reserved*/)
             reinterpret_cast<WCHAR*>(module), &module);
         break;
     }
+#endif
     return TRUE;
 }
 #endif
diff --git a/alc/alconfig.cpp b/alc/alconfig.cpp
index 60cb4da..3c47ef7 100644
--- a/alc/alconfig.cpp
+++ b/alc/alconfig.cpp
@@ -330,6 +330,7 @@ const char *GetConfigValue(const char *devName, const char *blockName, const cha
 void ReadALConfig()
 {
     WCHAR buffer[MAX_PATH];
+#if WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP
     if(SHGetSpecialFolderPathW(nullptr, buffer, CSIDL_APPDATA, FALSE) != FALSE)
     {
         std::string filepath{wstr_to_utf8(buffer)};
@@ -340,6 +341,7 @@ void ReadALConfig()
         if(f.is_open())
             LoadConfigFromFile(f);
     }
+#endif
 
     std::string ppath{GetProcBinary().path};
     if(!ppath.empty())
diff --git a/alc/backends/sdl2.cpp b/alc/backends/sdl2.cpp
index c072603..81b618c 100644
--- a/alc/backends/sdl2.cpp
+++ b/alc/backends/sdl2.cpp
@@ -32,7 +32,7 @@
 #include "core/device.h"
 #include "core/logging.h"
 
-#include <SDL2/SDL.h>
+#include "SDL.h"
 
 
 namespace {
diff --git a/common/alfstream.cpp b/common/alfstream.cpp
index 3beda83..7b15166 100644
--- a/common/alfstream.cpp
+++ b/common/alfstream.cpp
@@ -94,8 +94,13 @@ bool filebuf::open(const wchar_t *filename, std::ios_base::openmode mode)
 {
     if((mode&std::ios_base::out) || !(mode&std::ios_base::in))
         return false;
+#if WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+    HANDLE f{CreateFile2(filename, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING,
+        nullptr)};
+#else
     HANDLE f{CreateFileW(filename, GENERIC_READ, FILE_SHARE_READ, nullptr, OPEN_EXISTING,
         FILE_ATTRIBUTE_NORMAL, nullptr)};
+#endif
     if(f == INVALID_HANDLE_VALUE) return false;
 
     if(mFile != INVALID_HANDLE_VALUE)
diff --git a/common/dynload.cpp b/common/dynload.cpp
index f1c2a7e..8eeebfd 100644
--- a/common/dynload.cpp
+++ b/common/dynload.cpp
@@ -12,7 +12,11 @@
 void *LoadLib(const char *name)
 {
     std::wstring wname{utf8_to_wstr(name)};
+#if WINAPI_FAMILY != WINAPI_FAMILY_DESKTOP_APP
+    return LoadPackagedLibrary(wname.c_str(), 0);
+#else
     return LoadLibraryW(wname.c_str());
+#endif
 }
 void CloseLib(void *handle)
 { FreeLibrary(static_cast<HMODULE>(handle)); }
diff --git a/common/strutils.cpp b/common/strutils.cpp
index 18c4947..33af57f 100644
--- a/common/strutils.cpp
+++ b/common/strutils.cpp
@@ -45,18 +45,22 @@ namespace al {
 
 al::optional<std::string> getenv(const char *envname)
 {
+#if (defined WINAPI_FAMILY && WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP) || !defined _WIN32
     const char *str{std::getenv(envname)};
     if(str && str[0] != '\0')
         return al::make_optional<std::string>(str);
+#endif
     return al::nullopt;
 }
 
 #ifdef _WIN32
 al::optional<std::wstring> getenv(const WCHAR *envname)
 {
+#if (defined WINAPI_FAMILY && WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP) || !defined _WIN32
     const WCHAR *str{_wgetenv(envname)};
     if(str && str[0] != L'\0')
         return al::make_optional<std::wstring>(str);
+#endif
     return al::nullopt;
 }
 #endif
diff --git a/core/helpers.cpp b/core/helpers.cpp
index 754e66c..6bc238d 100644
--- a/core/helpers.cpp
+++ b/core/helpers.cpp
@@ -150,6 +150,7 @@ al::vector<std::string> SearchDataFiles(const char *ext, const char *subdir)
     DirectorySearch(path.c_str(), ext, &results);
 
     /* Search the local and global data dirs. */
+#if WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP
     static const int ids[2]{ CSIDL_APPDATA, CSIDL_COMMON_APPDATA };
     for(int id : ids)
     {
@@ -165,6 +166,7 @@ al::vector<std::string> SearchDataFiles(const char *ext, const char *subdir)
 
         DirectorySearch(path.c_str(), ext, &results);
     }
+#endif
 
     return results;
 }
